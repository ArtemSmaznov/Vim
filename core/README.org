#+TITLE: Doom CORE
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: Core configuration for Doom Vim
#+STARTUP: overview
#+PROPERTY: header-args :tangle core.vim

* Table of Contents :toc:
- [[#core][Core]]
- [[#helper-functions][Helper functions]]
- [[#editor][Editor]]
  - [[#general-abbreviations][General abbreviations]]
  - [[#search][Search]]
  - [[#files-backups-and-undo][Files, Backups and Undo]]
  - [[#ignore-compiled-files][Ignore Compiled Files]]
  - [[#text-tab-and-indent-related][Text, tab and indent related]]
  - [[#tabs-windows-and-buffers][Tabs, windows and buffers]]
  - [[#mouse][Mouse]]
  - [[#sound][Sound]]
  - [[#backspace][Backspace]]
  - [[#sudo-save][Sudo Save]]
  - [[#spell-checking][Spell Checking]]
- [[#file-handling][File Handling]]
  - [[#file-types][File Types]]
- [[#syntax-highlighting][Syntax highlighting]]
  - [[#ssh-hosts][SSH Hosts]]
- [[#ui][UI]]
  - [[#color-scheme][Color Scheme]]
  - [[#fonts][Fonts]]
  - [[#visual-elements][Visual Elements]]
  - [[#remove-separator-pipes][Remove separator pipes]]
  - [[#disable-scroll-bars][Disable Scroll-bars]]
  - [[#terminal-colors][Terminal Colors]]
  - [[#gui-mode][GUI Mode]]
- [[#keybindings][Keybindings]]
  - [[#helper-functions-1][Helper Functions]]
  - [[#leader][Leader]]
  - [[#g][g]]
  - [[#z][z]]
  - [[#z-1][Z]]
  - [[#square-brackets][Square Brackets]]
  - [[#arrows][Arrows]]
  - [[#folds][Folds]]
  - [[#visual-selection-search][Visual Selection Search]]
  - [[#alt][Alt]]
  - [[#ctrl][Ctrl]]

* Core
Enable file type plugins
#+begin_src vimrc
filetype plugin on
filetype indent on
#+end_src

Leader Key
With a map leader it's possible to do extra key combinations
#+begin_src vimrc
let g:mapleader = " "
let g:maplocalleader = " m"
#+end_src

Sources
#+begin_src vimrc
source $HOME/.vim/packages.vim
source $HOME/.vim/modules/source.vim
source $HOME/.vim/core/core-editor.vim
source $HOME/.vim/core/core-ui.vim
source $HOME/.vim/core/core-keybindings.vim
#+end_src

* Helper functions
#+begin_src vimrc
" Returns true if paste mode is enabled
function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  endif
  return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

function! CmdLine(str)
  call feedkeys(":" . a:str)
endfunction 

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

func! DeleteTillSlash()
  let g:cmd = getcmdline()

  if has("win16") || has("win32")
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  endif

  if g:cmd == g:cmd_edited
    if has("win16") || has("win32")
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    endif
  endif   

  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc
#+end_src

* Editor
:PROPERTIES:
:header-args: :tangle core-editor.vim
:END:
** General abbreviations
#+begin_src vimrc
iab xdate <C-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
#+end_src

** Search
#+begin_src vimrc
set ignorecase " Ignore case when searching
set smartcase  " When searching try to be smart about cases
set hlsearch   " Highlight search results
set incsearch  " Makes search act like search in modern browsers
set magic      " For regular expressions turn magic on

set wildmenu   " Turn on the Wild menu
#+end_src

** Files, Backups and Undo
#+begin_src vimrc
set nobackup              " This is recommended by coc
set nowritebackup         " This is recommended by coc
set noswapfile

set history=500       " Sets how many lines of history VIM has to remember
set clipboard=unnamed " Copy paste between vim and everything else

" Set to auto read when a file is changed from the outside
set autoread
" au FocusGained,BufEnter * checktime
au FocusGained * checktime

" Turn persistent undo on - you can undo even when you close a buffer/VIM
try
  set undodir=$HOME/.vim/.local/etc/transient/undodir
  set undofile
catch
endtry

" Change location of cache files for NetRW
let g:netrw_home="$HOME/.vim/.local/cache"
#+end_src

** Ignore Compiled Files
#+begin_src vimrc
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
  set wildignore+=.git\*,.hg\*,.svn\*,**\node_modules\**
else
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,**/node_modules/**,*/.DS_Store
endif
#+end_src

** Text, tab and indent related
#+begin_src vimrc
set tabstop=2             " Insert 2 spaces for a tab
set shiftwidth=2          " Change the number of spaces for indentation
set smarttab              " Makes tabbing smarter will realize you have 2 vs 4
set expandtab             " Converts tabs to spaces

" Linebreak on 500 characters
set linebreak
" set textwidth=500

set autoindent  " Good auto indent
set smartindent " Makes indenting smart
set wrap        " Wrap lines

" CTRL+A/X will only treat numbers as decimals or hex
set nrformats=bin,hex
#+end_src

** Tabs, windows and buffers
#+begin_src vimrc
set hidden     " A buffer becomes hidden when it is abandoned

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Delete trailing white space on save, useful for some filetypes
fun! CleanExtraSpaces()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfun

if has("autocmd")
  autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif
#+end_src

** Mouse
Enable Mouse Support
#+begin_src vimrc
set mouse=a

if !has('nvim')
  set ttymouse=sgr
  set termwinsize=15x0 " Set size for terminal
endif

set lazyredraw " Don't redraw while executing macros (good performance config)
set showmatch  " Show matching brackets when text indicator is over them
set mat=2      " How many tenths of a second to blink when matching brackets
#+end_src

** Sound
No annoying sound on errors
#+begin_src vimrc
set noerrorbells
set novisualbell
set t_vb=
set tm=500
#+end_src

Properly disable sound on errors on MacVim
#+begin_src vimrc
if has("gui_macvim")
  autocmd GUIEnter * set vb t_vb=
endif
#+end_src

** Backspace
Configure backspace so it acts as it should act
#+begin_src vimrc
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
#+end_src

** Sudo Save
=:W= sudo saves the file
useful for handling the permission-denied error
#+begin_src vimrc
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!
#+end_src

** Spell Checking
#+begin_src vimrc
set spelllang=en_us
#+end_src

* File Handling
#+begin_src vimrc
set encoding=utf-8 " Set utf8 as standard encoding and en_US as the standard language
set ffs=unix,dos,mac " Use Unix as the standard file type
#+end_src

** File Types
#+begin_src vimrc :tangle ../filetype.vim
au BufNewFile,BufRead known_hosts,authorized_keys,*.pub setfiletype sshhosts
#+end_src

* Syntax highlighting
Enable syntax highlighting
#+begin_src vimrc
syntax enable
#+end_src

** SSH Hosts
:PROPERTIES:
:header-args: :tangle ../syntax/sshhosts.vim
:END:
IP, Port or HostName
#+begin_src vimrc
syn match sshhost "\d\{1,3}\.\d\{1,3}\.\d\{1,3}\.\d\{1,3}"
syn match sshhost ":\d\+"
syn match sshhost "[0-9a-zA-Z_-]\+@.\+"
#+end_src

Website
#+begin_src vimrc
syn match sshsite ".\+\(,\)\@="
#+end_src

Public SSH key
#+begin_src vimrc
syn match sshpubkey "AAAA[0-9a-zA-Z+/]\+[=]\{0,2}"
#+end_src

Define the default highlighting
#+begin_src vimrc
hi def link sshsite Statement
hi def link sshhost Special 
hi def link sshpubkey SpecialKey
#+end_src

* UI
:PROPERTIES:
:header-args: :tangle core-ui.vim
:END:
** Color Scheme
#+begin_src vimrc
set background=dark
colorscheme gruvbox8
#+end_src

** Fonts
#+begin_src vimrc
" Set font according to system
if has("mac") || has("macunix")
  set gfn=IBM\ Plex\ Mono:h14,Hack:h14,Source\ Code\ Pro:h15,Menlo:h15
elseif has("win16") || has("win32")
  set gfn=Hack\ Nerd\ Font\ Mono:h10,Source\ Code\ Pro:h12,IBM\ Plex\ Mono:h14,Consolas:h11
elseif has("gui_gtk2")
  set gfn=IBM\ Plex\ Mono\ 14,:Hack\ 14,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
elseif has("linux")
  set gfn=IBM\ Plex\ Mono\ 14,:Hack\ 14,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
elseif has("unix")
  set gfn=Monospace\ 11
endif
#+end_src

** Visual Elements
#+begin_src vimrc
set foldcolumn=1     " Add a bit extra margin to the left
set signcolumn=yes   " Always show the signcolumn, otherwise it would shift the text each time
set ruler            " Always show current position
set number           " Show line numbers
set relativenumber   " Make line numbers relative
set cursorline       " Enable highlighting of the current line
set showtabline=2    " Always show tabs
set laststatus=2     " Always display the status line
set showcmd          " Show commands
set cmdheight=1      " Height of the command bar
set splitbelow       " Horizontal splits will automatically be below
set splitright       " Vertical splits will automatically be to the right
#+end_src

** Remove separator pipes
#+begin_src vimrc
set fillchars+=vert:\ 
#+end_src

** Disable Scroll-bars 
#+begin_src vimrc
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L
#+end_src

** Terminal Colors
Enable 256 colors palette in Gnome Terminal
#+begin_src vimrc
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif
#+end_src

#+begin_src vimrc
if exists('$TMUX') 
  if has('nvim')
    set termguicolors
  else
    set term=screen-256color 
  endif
endif
#+end_src

** GUI Mode
Set extra options when running in GUI mode
#+begin_src vimrc
if has("gui_running")
  set guioptions-=T
  set guioptions-=e
  set t_Co=256
  set guitablabel=%M\ %t
endif
#+end_src

* Keybindings
:PROPERTIES:
:header-args: :tangle core-keybindings.vim
:END:
** Helper Functions
*** Clear
#+begin_src vimrc
function! ClearAll()
    call feedkeys( ":nohlsearch\<CR>" )
    call feedkeys( "\<Plug>(ExchangeClear)" )
endfunction
#+end_src

*** Cycle Line Numbers
Cycle through line number options:
- relative
- normal
- disabled
#+begin_src vimrc
function! Cycle_LineNumbers()
    if &number && &relativenumber
        setlocal norelativenumber
        echo 'Switched to normal line numbers'
    elseif &number && ! &relativenumber
        setlocal nonumber
        echo 'Switched to disabled line numbers'
    else
        setlocal number
        setlocal relativenumber
        echo 'Switched to relative line numbers'
    endif
endfunction
#+end_src

*** Generic Mode Toggle
Toggle options and print change message to status bar
Source: https://vim.fandom.com/wiki/Quick_generic_option_toggling
#+begin_src vimrc
function! Toggle_Mode( mode, enable_message, disable_message )
    execute 'setlocal ' . a:mode . '!'
    execute 'echo (&' . a:mode' ? "' . a:enable_message . '" : "' . a:disable_message . '")'
endfunction
#+end_src

*** Toggle Fill Column
#+begin_src vimrc
function! Toggle_FillColumn()
    execute 'set colorcolumn=' . (&colorcolumn == '' ? '-0' : '')
    execute 'echo ' . (&colorcolumn == '' ? '"Global Dispaly-Fill-Column-Indicator mode disabled"' : '"Global Dispaly-Fill-Column-Indicator mode enabled"')
endfunction
#+end_src

*** Toggle Rainbow
#+begin_src vimrc
if has_key(plugs, 'Colorizer')
    function! Toggle_Rainbow()
        if !exists('w:match_list') || empty(w:match_list)
            echo 'Rainbow mode enabled in current buffer'
            ColorHighlight
        else
            echo 'Rainbow mode disabled in current buffer'
            ColorClear
        endif
    endfunction
endif
#+end_src

*** Reveal in File Manager
#+begin_src vimrc
function! Reveal_In_Files()
    if has('linux')
        let opencmd = '!xdg-open '
    elseif has('mac') || has('macunix')
        let opencmd = '!open '
    elseif has('win16') || has('win32')
        let opencmd = '!explorer.exe '
        " let opencmd = '!start explorer.exe /select,'
    endif

    silent execute opencmd . expand('%:p:h')
endfunction
#+end_src

** Leader
*** Root
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map['<Esc>'] = 'Reset/Cleanup'           | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map[',']     = 'Switch workspace buffer' | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map['<']     = 'Switch buffer'           | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map['`']     = 'Switch to last buffer'   | endif

nnoremap <silent> <leader><Esc> :call ClearAll()<cr>
nnoremap <leader>, :BufExplorerHorizontalSplit<cr>
nnoremap <leader>< :Buffers<cr>
nnoremap <leader>` :b#<cr>
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map[' '] = ['GFiles', 'Find file in project' ] | endif

    nnoremap <leader><Space> :GFiles<cr>
endif
#+end_src

**** Git Gutter
#+begin_src vimrc
if has_key(plugs, 'vim-gitgutter')
    " Select current hunk
    omap ic <Plug>(GitGutterTextObjectInnerPending)
    omap ac <Plug>(GitGutterTextObjectOuterPending)
    xmap ic <Plug>(GitGutterTextObjectInnerVisual)
    xmap ac <Plug>(GitGutterTextObjectOuterVisual)
endif
#+end_src

*** TAB -> +workspace
**** Vanilla
#+begin_src vimrc
" if has_key(plugs, 'vim-which-key') | let g:which_key_map['<Tab>']       = { 'name' : '+workspace' }   | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.['<Tab>']['.'] = 'Switch workspace'          | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map['<Tab>']['0']  = 'Switch to final workspace' | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map['<Tab>']['1']  = 'Switch to 1st workspace'   | endif

nnoremap <silent> <leader><Tab>. :tabs<cr>
nnoremap <silent> <leader><Tab>0 :$tabnext<cr>
nnoremap <silent> <leader><Tab>1 :1tabnext<cr>
nnoremap <silent> <leader><Tab>2 :2tabnext<cr>
nnoremap <silent> <leader><Tab>3 :3tabnext<cr>
nnoremap <silent> <leader><Tab>4 :4tabnext<cr>
nnoremap <silent> <leader><Tab>5 :5tabnext<cr>
nnoremap <silent> <leader><Tab>6 :6tabnext<cr>
nnoremap <silent> <leader><Tab>7 :7tabnext<cr>
nnoremap <silent> <leader><Tab>8 :8tabnext<cr>
nnoremap <silent> <leader><Tab>9 :9tabnext<cr>
nnoremap <silent> <leader><Tab>< :0tabmove<cr>
nnoremap <silent> <leader><Tab>> :$tabmove<cr>
nnoremap <silent> <leader><Tab>[ :tabprevious<cr>
nnoremap <silent> <leader><Tab>] :tabnext<cr>
nnoremap <silent> <leader><Tab>c :tabclose<cr>
nnoremap <silent> <leader><Tab>d :tabclose<cr>
nnoremap <leader><Tab>m :tabmove
nnoremap <leader><Tab>n :tabnew<cr>
nnoremap <leader><Tab>N :tabnew 
nnoremap <silent> <leader><Tab>O :tabonly<cr>
nnoremap <silent> <leader><Tab>{ :-tabmove<cr>
nnoremap <silent> <leader><Tab>} :+tabmove<cr>


" Toggle between this and the last accessed tab
let g:lasttab = 1
nnoremap <silent> <leader><Tab>` :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    nnoremap <silent> <leader><Tab>. :Windows<cr>
endif
#+end_src

*** b -> +buffer
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b      = { 'name' : '+buffer' }    | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['['] = 'Previous buffer'         | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b[']'] = 'Next buffer'             | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['b'] = 'Switch workspace buffer' | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['B'] = 'Switch buffer'           | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['d'] = 'Kill buffer'             | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['i'] = 'ibuffer'                 | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['k'] = 'Kill buffer'             | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['K'] = 'Kill all buffers'        | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['l'] = 'Switch to last buffer'   | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['L'] = 'List bookmarks'          | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['n'] = 'Next buffer'             | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['N'] = 'New empty buffer'        | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['O'] = 'Kill other buffers'      | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['p'] = 'Previous buffer'         | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['r'] = 'Revert buffer'           | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['s'] = 'Save buffer'             | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['S'] = 'Save all buffers'        | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.b['u'] = 'Save buffer as root'     | endif

nnoremap <silent> <leader>b[ :bprevious<cr>
nnoremap <silent> <leader>b] :bnext<cr>
nnoremap <silent> <leader>bb :BufExplorerHorizontalSplit<cr>
nnoremap <silent> <leader>bB :Buffers<cr>
nnoremap <silent> <leader>bd :Bclose<cr>
nnoremap <silent> <leader>bi :BufExplorer<cr>
nnoremap <silent> <leader>bk :Bclose<cr>
nnoremap <silent> <leader>bK :bufdo bd<cr>
nnoremap <silent> <leader>bl :b#<cr>
nnoremap <silent> <leader>bL :marks<cr>
nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bN :e *new*<cr>
nnoremap <leader>bO :%bd <Bar> e#<cr>
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <silent> <leader>br :if confirm('Discard edits and reread from ' . expand('%:p') . '?', "&Yes\n&No", 1)==1 <Bar> exe ":edit!" <Bar> endif<cr>
nnoremap <leader>bs :write<cr>
nnoremap <leader>bS :wa<cr>
nnoremap <leader>bu :W<cr>
#+end_src

*** c -> +code
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.c = { 'name' : '+code' } | endif
#+end_src

**** CoC
#+begin_src vimrc
if has_key(plugs, 'coc.nvim')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.c = { 'name' : '+code' } | endif

    " Remap for format selected region
    xmap <leader>cf  <Plug>(coc-format-selected)
    nmap <leader>cf  <Plug>(coc-format-selected)
    let g:which_key_map.c['f'] = 'Format' 

    " Remap for do codeAction of current line
    nmap <leader>c<space> <Plug>(coc-codeaction)
    let g:which_key_map.c[' '] = 'Code action' 

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    xmap <leader>cv <Plug>(coc-codeaction-selected)
    nmap <leader>cv <Plug>(coc-codeaction-selected)
    let g:which_key_map.c['v'] = 'Code action selected' 

    " Fix autofix problem of current line
    nmap <leader>ca  <Plug>(coc-fix-current)
    let g:which_key_map.c['a'] = 'Fix current' 

    " Show all diagnostics
    nnoremap <silent> <leader>cd  :<C-u>CocList diagnostics<cr>
    let g:which_key_map.c['d'] = 'Diagnostics' 

    " Manage extensions
    nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>
    let g:which_key_map.c['e'] = 'Extensions' 

    " Show commands
    nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>
    let g:which_key_map.c['c'] = 'Commands' 

    " Find symbol of current document
    nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
    let g:which_key_map.c['o'] = 'Outline' 

    " Search workspace symbols
    nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>
    let g:which_key_map.c['s'] = 'Symbols' 

    nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
    let g:which_key_map.c['j'] = 'Default action for next item' 

    nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
    let g:which_key_map.c['k'] = 'Default action for previous item' 

    nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>
    let g:which_key_map.c['p'] = 'Resume latest coc list' 

endif
#+end_src

*** f -> +file
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f      = { 'name' : '+file' }          | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['c'] = 'CD to current directory'     | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['c'] = 'Open project editorconfig'   | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['C'] = 'Copy this file'              | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['d'] = 'Find directory'              | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['D'] = 'Delete this file'            | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['E'] = 'Browse vim.d'                | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['P'] = 'Browse private config'       | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['R'] = 'Rename/move file'            | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['s'] = 'Save file'                   | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['S'] = 'Save as...'                  | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['u'] = 'Sudo find file'              | endif
" if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['U'] = 'Sudo this file'              | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['y'] = 'Yank file path'              | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['Y'] = 'Yank file path from project' | endif
if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['v'] = 'Grep?'                       | endif

nnoremap <leader>fc :cd %:p:h<cr>:pwd<cr>
nnoremap <silent> <leader>fD :if confirm('Really delete "' . expand('%') . '"?', "&Yes\n&No", 1)==1 <Bar> exe ":call delete(@%)" <Bar> exe ":Bclose" <Bar> endif<cr>
nnoremap <leader>fE :Hexplore ~/.vim/core<cr>
nnoremap <leader>fP :Hexplore ~/.vim<cr>
nnoremap <leader>fs :write<cr>
nnoremap <leader>fS :write 
nnoremap <leader>fy :let @" = expand('%:p')<cr>:let @+ = expand('%:p')<cr>:echo "Copied path to clipboard: " . expand('%:p')<cr>
nnoremap <leader>fY :let @" = expand('%')<cr>:let @+ = expand('%')<cr>:echo "Copied path to clipboard: " . expand('%')<cr>
nnoremap <leader>fv :vimgrep **/*
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['e'] = 'Find file in vim.d'          | endif
    " if has_key(plugs, 'vim-which-key') | let g:which_key_map.f['f'] = 'Find file'                   | endif
    if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['F'] = 'Find file from here'         | endif
    if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['l'] = 'Locate file'                 | endif
    if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['p'] = 'Find file in private config' | endif
    if has_key(plugs, 'vim-which-key')   | let g:which_key_map.f['r'] = 'Recent files'                | endif

    map <leader>fe :Files ~/.vim/core<CR>
    map <leader>fF :Files<CR>
    map <leader>fl :Locate 
    map <leader>fp :Files ~/.vim<CR>
    map <leader>fr :History<CR>
endif
#+end_src

*** g -> +git
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.g      = { 'name' : '+git' } | endif
#+end_src

**** Git Gutter
#+begin_src vimrc
if has_key(plugs, 'vim-gitgutter')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g['['] = 'Jump to previous hunk' | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g[']'] = 'Jump to next hunk'     | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g['p'] = 'Preview hunk'          | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g['s'] = 'Git stage hunk'        | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g['r'] = 'Revert hunk'           | endif

    nmap <leader>g[ <Plug>(GitGutterPrevHunk)
    nmap <leader>g] <Plug>(GitGutterNextHunk)
    nmap <leader>gp <Plug>(GitGutterPreviewHunk)
    nmap <leader>gs <Plug>(GitGutterStageHunk)
    nmap <leader>gr <Plug>(GitGutterUndoHunk)
endif
#+end_src

**** Fugitive
#+begin_src vimrc
if has_key(plugs, 'vim-fugitive')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g['d'] = 'Diff Split'            | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.g['g'] = 'Status' | endif
    
    nmap <silent> <leader>gd :Gvdiffsplit<cr>
    nmap <silent> <leader>gg :Git<cr>
endif
#+end_src

*** h -> +help
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.h = { 'name' : '+help' } | endif
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['<CR>']   = 'info-vim-Manual'         | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['?']      = 'help-for-help'           | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['e']      = 'view-echo-area-messages' | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['i']      = 'show-version-info'       | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['k']      = 'describe-key'            | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['q']      = 'help-quit'               | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['s']      = 'help-search-headings'    | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['t']      = 'load-theme'              | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['v']      = 'show-version-info'       | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['<F1>']   = 'help-for-help'           | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.h['<Help>'] = 'help-for-help'           | endif

    nnoremap <silent> <leader>h<CR> :help<cr>
    nnoremap <silent> <leader>h? :help helphelp<cr>
    nnoremap <silent> <leader>he :messages<cr>
    nnoremap <silent> <leader>hi :version<cr>
    nnoremap <silent> <leader>hk :Maps<cr>
    nnoremap <silent> <leader>hq :helpclose<cr>
    nnoremap <silent> <leader>hs :Helptags<cr>
    nnoremap <silent> <leader>ht :Colors<cr>
    nnoremap <silent> <leader>hv :version<cr>
    nnoremap <silent> <leader>h<F1> :help helphelp<cr>
    nnoremap <silent> <leader>h<Help> :help helphelp<cr>
endif
#+end_src

*** h-r -> +reload
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.h.r      = { 'name' : '+reload' } | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.h.r['f'] = 'reload-this-file'     | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.h.r['p'] = 'reload-packages'      | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.h.r['r'] = 'reload'               | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.h.r['t'] = 'reload-theme'         | endif

nnoremap <silent> <leader>hrf :source % <Bar> echo "Current file successfully reloaded!"<cr>
nnoremap <silent> <leader>hrp :PlugInstall --sync<cr>
nnoremap <silent> <leader>hrr :source $MYVIMRC<cr>
nnoremap <silent> <leader>hrt :execute 'colorscheme ' . g:colors_name<cr>
#+end_src

*** i -> +insert
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.i      = { 'name' : '+insert' } | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.i['f'] = 'Current file name'    | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.i['F'] = 'Current file path'    | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.i['p'] = 'Evil ex path'         | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.i['t'] = 'Toilet pagga'         | endif

" nnoremap <silent> <leader>if :normal "%p<cr>
nnoremap <silent> <leader>if a<C-r>=expand("%:t")<cr><esc>
nnoremap <silent> <leader>iF a<C-r>=expand("%:p")<cr><esc>
nnoremap <leader>ip :r !echo 
nnoremap <leader>it :r !toilet -f pagga
#+end_src

*** o -> +open
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.o      = { 'name' : '+open' } | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['-'] = 'Netrw'              | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['b'] = 'Default browser'    | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['o'] = 'Reveal in finder'   | endif

nnoremap <leader>o- :Explore<cr>
nnoremap <leader>ob <Plug>NetrwBrowseX
nnoremap <leader>oo :call Reveal_In_Files()<cr>
#+end_src

**** CoC
#+begin_src vimrc
if has_key(plugs, 'coc.nvim')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['p'] = 'Project sidebar'              | endif
    " if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['P'] = 'Find file in project sidebar' | endif

    nnoremap <leader>op :CocCommand explorer<cr>
endif
#+end_src

**** Float Term
#+begin_src vimrc
if has_key(plugs, 'vim-floaterm')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['-'] = 'Vifm'              | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.o['t'] = 'Toggle term popup' | endif

    nnoremap <silent> <leader>ot :FloatermToggle<cr>
    nnoremap <silent> <leader>o- :FloatermNew vifm<cr>
endif
#+end_src

*** m -> +localleader
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.m = { 'name' : '+<localleader>' } | endif
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.m['M'] = 'Switch major mode' | endif
    
    nnoremap <silent> <leader>mM :Filetypes<CR>
endif
#+end_src

*** p -> +popup (project)
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.p = { 'name' : '+popup' } | endif
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.p['f'] = 'Find file in project' | endif

    nnoremap <leader>pf :GFiles<cr>
endif
#+end_src

*** q -> +quit/session
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q      = { 'name' : '+quit/session' } | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q['l'] = 'Restore last session'       | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q['L'] = 'Restore session from file'  | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q['q'] = 'Quit Vim'                   | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q['Q'] = 'Quit Vim without saving'    | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q['s'] = 'Quick save current session' | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.q['S'] = 'Save session to file'       | endif

nnoremap <silent> <leader>ql :source $HOME/.vim/.local/etc/workspaces/quick-session.vim<cr>
nnoremap <silent> <leader>qL :source $HOME/.vim/.local/etc/workspaces/
nnoremap <silent> <leader>qq :qa<cr>
nnoremap <silent> <leader>qQ :qa!<cr>
nnoremap <silent> <leader>qs :mksession! $HOME/.vim/.local/etc/workspaces/quick-session.vim<cr>
nnoremap <silent> <leader>qS :mksession $HOME/.vim/.local/etc/workspaces/
#+end_src

*** s -> +search
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.s = { 'name' : '+search' } | endif
#+end_src

**** FZF
#+begin_src vimrc
if has_key(plugs, 'fzf')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['b'] = 'Search buffer'              | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['B'] = 'Search all open buffers'    | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['p'] = 'Search project'             | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['r'] = 'Jump to mark'               | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['t'] = 'Search Tags in buffer'      | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['T'] = 'Search Tags in all buffers' | endif
    
    nnoremap <leader>sb :BLines<CR>
    nnoremap <leader>sB :Lines<CR>
    nnoremap <leader>sp :Rg<CR>
    nnoremap <leader>sr :Marks<CR>
    nnoremap <leader>st :BTags<CR>
    nnoremap <leader>sT :Tags<CR>
    
    " if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['/'] = 'Search history'      | endif
    " if has_key(plugs, 'vim-which-key') | let g:which_key_map.s[':'] = 'Commands history'    | endif
    " if has_key(plugs, 'vim-which-key') | let g:which_key_map.s['c'] = 'Search all commands' | endif

"     nnoremap <silent> <leader>s/ :History/<CR>
"     nnoremap <silent> <leader>s: :History:<CR>
"     nnoremap <silent> <leader>sc :Commands<CR>
endif
#+end_src

*** t -> +toggle
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t      = { 'name' : '+toggle' }   | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['l'] = 'Line numbers'           | endif 
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['p'] = 'Paste mode'             | endif 
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['w'] = 'Soft line wrapping'     | endif 
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['r'] = 'Read-only mode'         | endif 
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['s'] = 'Spell checker'          | endif 
if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['|'] = 'Fill column indicator'  | endif 

nnoremap <leader>tl :call Cycle_LineNumbers()<cr>
nnoremap <leader>tp :call Toggle_Mode('paste'   , 'Paste mode enabled in current buffer'      , 'Paste mode disabled in current buffer')<cr>
nnoremap <leader>tw :call Toggle_Mode('wrap'    , 'Visual-Line mode enabled in current buffer', 'Visual-Line mode disabled in current buffer')<cr>
nnoremap <leader>tr :call Toggle_Mode('readonly', 'Read-Only mode enabled in current buffer'  , 'Read-Only mode disabled in current buffer')<cr>
nnoremap <leader>ts :call Toggle_Mode('spell'   , 'Spell mode enabled in current buffer'      , 'Spell mode disabled in current buffer')<cr>
nnoremap <leader>t\| :call Toggle_FillColumn()<cr>
#+end_src

**** Mini-map
#+begin_src vimrc
if has_key(plugs, 'vim-minimap')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['m']      = 'Minimap'                  | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['M']      = { 'name' : '+minimap...' } | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['M']['c'] = 'Close minimap'            | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['M']['o'] = 'Open minimap'             | endif
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['M']['u'] = 'Update minimap'           | endif
    
    let g:minimap_show='<leader>tMo'
    let g:minimap_update='<leader>tMu'
    let g:minimap_close='<leader>tMc'
    let g:minimap_toggle='<leader>tm'
endif
#+end_src

**** Colorizer
#+begin_src vimrc
if has_key(plugs, 'Colorizer')
    if has_key(plugs, 'vim-which-key') | let g:which_key_map.t['c'] = 'Colors' | endif

    nnoremap <leader>tc :call Toggle_Rainbow()<cr>
endif
#+end_src

*** w -> +window
**** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w      = { 'name' : '+window' }       | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['+'] = 'Increase window height'     | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['-'] = 'Decrease window height'     | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['<'] = 'Decrease window width'      | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['='] = 'Balance windows'            | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['>'] = 'Increase window width'      | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['_'] = 'Set window height'          | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['`'] = 'Open a terminal in a split' | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['b'] = 'Bottom-right window'        | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['c'] = 'Close window'               | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['d'] = 'Close window'               | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['h'] = 'Left window'                | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['H'] = 'Move window left'           | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['j'] = 'Down window'                | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['J'] = 'Move window down'           | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['k'] = 'Up window'                  | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['K'] = 'Move window up'             | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['l'] = 'Right window'               | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['L'] = 'Move window right'          | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['n'] = 'New window'                 | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['o'] = 'Enlargen window'            | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['p'] = 'Last window'                | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['q'] = 'Quit window'                | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['r'] = 'Rotate windows downwards'   | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['R'] = 'Rotate windows upwards'     | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['s'] = 'Split window'               | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['S'] = 'Split and follow window'    | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['t'] = 'Top-left window'            | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['T'] = 'Tear off window'            | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['v'] = 'VSplit window'              | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['V'] = 'VSplit and follow window'   | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['w'] = 'Next window'                | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['W'] = 'Previous window'            | endif
if has_key(plugs, 'vim-which-key') | let g:which_key_map.w['|'] = 'Set window width'           | endif

nnoremap <leader>w+ :resize +5<cr>
nnoremap <leader>w- :resize -5<cr>
nnoremap <leader>w< :vertical resize -5<cr>
nnoremap <leader>w= <C-w>=
nnoremap <leader>w> :vertical resize +5<cr>
nnoremap <leader>w_ :resize<cr>
nnoremap <leader>w` :term<cr>
nnoremap <leader>wb <C-w>b
nnoremap <leader>wc :close<cr>
nnoremap <leader>wd :close<cr>
nnoremap <leader>wh <C-w>h
nnoremap <leader>wH <C-w>H
nnoremap <leader>wj <C-w>j
nnoremap <leader>wJ <C-w>J
nnoremap <leader>wk <C-w>k
nnoremap <leader>wK <C-w>K
nnoremap <leader>wl <C-w>l
nnoremap <leader>wL <C-w>L
nnoremap <leader>wn :new<cr>
nnoremap <leader>wo :only<cr>
nnoremap <leader>wp <C-w>p
nnoremap <leader>wq :quit<cr>
nnoremap <leader>wr <C-w>r
nnoremap <leader>wR <C-w>R
nnoremap <leader>ws :split<cr><C-w>p
nnoremap <leader>wS :split<cr>
nnoremap <leader>wt <C-w>t
nnoremap <leader>wT <C-w>T
nnoremap <leader>wv :vsplit<cr><C-w>p
nnoremap <leader>wV :vsplit<cr>
nnoremap <leader>ww <C-w>w
nnoremap <leader>wW <C-w>W
nnoremap <leader>w\| :vertical resize<cr>
#+end_src

** g
*** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:g_map['#']      = 'ex-search-unbounded-word-backward' | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['$']      = 'end-of-visual-line'                | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['&']      = 'ex-repeat-substitute'              | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['*']      = 'ex-search-unbounded-word-forward'  | endif
if has_key(plugs, 'vim-which-key') | let g:g_map[',']      = 'goto-last-change-reverse'          | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['-']      = 'number/dec-at-point'               | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['0']      = 'beginning-of-visual-line'          | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['8']      = 'what-cursor-position'              | endif
if has_key(plugs, 'vim-which-key') | let g:g_map[';']      = 'goto-last-change'                  | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['=']      = 'number/inc-at-point'               | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['?']      = 'rot13'                             | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['@']      = 'apply-macro'                       | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['^']      = 'first-non-blank-of-visual-line'    | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['_']      = 'last-non-blank'                    | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['a']      = 'what-cursor-position'              | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['c']      = 'comment-operator'                  | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['d']      = '+lookup definition'                | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['e']      = 'backward-word-end'                 | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['E']      = 'backward-WORD-end'                 | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['f']      = '+lookup file'                      | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['F']      = 'find-file-at-point-with-line'      | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['g']      = 'goto-first-line'                   | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['i']      = 'insert-resume'                     | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['j']      = 'next-visual-line'                  | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['J']      = 'join-whitespace'                   | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['k']      = 'previous-visual-line'              | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['l']      = 'lion-left'                         | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['L']      = 'lion-right'                        | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['m']      = 'middle-of-visual-line'             | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['M']      = 'percentage-of-line'                | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['n']      = 'next-match'                        | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['N']      = 'previous-match'                    | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['o']      = 'goto-char'                         | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['p']      = 'reselect-paste'                    | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['q']      = 'fill-and-move'                     | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['Q']      = '+format region'                    | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['r']      = '+eval region'                      | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['R']      = '+eval/buffer'                      | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['s']      = '+prefix'                           | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['t']      = '+workspace switch-next '           | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['T']      = '+workspace switch-previous'        | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['u']      = 'downcase'                          | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['U']      = 'upcase'                            | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['v']      = 'visual-restore'                    | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['w']      = 'fill'                              | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['y']      = 'yank-unindented'                   | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['~']      = 'invert-case'                       | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['<C-]>']  = 'projectile-find-tag'               | endif
" if has_key(plugs, 'vim-which-key') | let g:g_map['<C-g>']  = 'count-words'                       | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['<Down>'] = 'next-visual-line'                  | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['<End>']  = 'end-of-visual-line'                | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['<Home>'] = 'first-non-blank-of-visual-line'    | endif
if has_key(plugs, 'vim-which-key') | let g:g_map['<Up>']   = 'previous-visual-line'              | endif

map g# g#
map g$ g$
map g& g&
map g* g*
map g, g,
map g- <C-x>
map g0 g0
map g8 g8
map g; g;
map g= <C-a>
map g? g?
map g^ g^
map g_ g_
map ga ga
map gc gc
map gd gd
map ge ge
map gE gE
map gf gf
map gF gF
map gg gg
map gi gi
map gj gj
map gJ gJ
map gk gk
map gl gl
map gL gL
map gm gm
map gM gM
map gn gn
map gN gN
map go go
map gq gq
map gt gt
map gT gT
map gu gu
map gU gU
map gv gv
map gw gw
map g~ g~
map g<Down> g<Down>
map g<End> g<End>
map g<Home> g<Home>
map g<Up> g<Up>
#+end_src

*** Vim Exchange
#+begin_src vimrc
if has_key(plugs, 'vim-exchange')
    if has_key(plugs, 'vim-which-key') | let g:g_map["x"] = 'exchange' | endif

    nmap gx <Plug>(Exchange)
    nmap gxx <Plug>(ExchangeLine)
    nmap gxc <Plug>(ExchangeClear)
    xmap gx <Plug>(Exchange)
endif
#+end_src

*** CoC
#+begin_src vimrc
if has_key(plugs, 'coc.nvim')
    " if has_key(plugs, 'vim-which-key') | let g:g_map['A'] = '+lookup assignments'     | endif
    if has_key(plugs, 'vim-which-key') | let g:g_map['d'] = '+lookup definition'      | endif
    if has_key(plugs, 'vim-which-key') | let g:g_map['D'] = '+lookup references'      | endif
    if has_key(plugs, 'vim-which-key') | let g:g_map['I'] = '+lookup implementations' | endif
    
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gD <Plug>(coc-references)
    nmap <silent> gI <Plug>(coc-implementation)
    " nmap <silent> gy <Plug>(coc-type-definition)
endif
#+end_src

** z
*** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:z_map['+']    = 'scroll-bottom-line-to-top' | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['-']    = 'scroll-line-to-bottom'     | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['.']    = 'scroll-line-to-center'     | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['=']    = 'ispell-word'               | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['^']    = 'scroll-top-line-to-bottom' | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['b']    = 'scroll-line-to-bottom'     | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['g']    = 'add-word'                  | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['t']    = 'scroll-line-to-top'        | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['z']    = 'scroll-line-to-center'     | endif
if has_key(plugs, 'vim-which-key') | let g:z_map['<CR>'] = 'scroll-line-to-top'        | endif

map z= z=
map zg zg
#+end_src

** Z
*** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:Z_map['Q'] = 'vim-quit'                | endif
if has_key(plugs, 'vim-which-key') | let g:Z_map['Z'] = 'save-modified-and-close' | endif

map ZQ ZQ
map ZZ ZZ
#+end_src

** Square Brackets
*** Vanilla
#+begin_src vimrc
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['"'] = 'which_key_ignore'                 | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map[' '] = ['[o', 'Insert newline above']     | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['#'] = 'Previous preproc directive'       | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map["'"] = 'Previous mark line'               | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['('] = 'Previous open paren'              | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['['] = 'Backward section end'             | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map[']'] = 'Backward section begin'           | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['`'] = 'Previous mark'                    | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['a'] = 'Backward arg'                     | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['b'] = 'Previous buffer'                  | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['c'] = 'Previous comment'                 | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['f'] = 'Previous file'                    | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['h'] = 'Outline previous visible heading' | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['m'] = 'Previous beginning of method'     | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['M'] = 'Previous end of method'           | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['o'] = 'Insert newline above'             | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['s'] = '+spell Previous error'            | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['t'] = 'Hl todo previous'                 | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['u'] = 'Url decode'                       | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['w'] = '+workspace Switch left'           | endif
" if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['y'] = 'C string decode'                  | endif
if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['{'] = 'Previous open brace'              | endif

if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['"'] = 'which_key_ignore'                 | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map[' '] = [']o', 'Insert newline below']     | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['#'] = 'Next preproc directive'           | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map["'"] = 'Next mark line'                   | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map[')'] = 'Next close paren'                 | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['['] = 'Forward section end'              | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map[']'] = 'Forward section begin'            | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['`'] = 'Next mark'                        | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['a'] = 'Forward arg'                      | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['b'] = 'Next buffer'                      | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['c'] = 'Next comment'                     | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['f'] = 'Next file'                        | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['h'] = 'Outline next visible heading'     | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['m'] = 'Next beginning of method'         | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['M'] = 'Next end of method'               | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['o'] = 'Insert newline below'             | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['s'] = '+spell Next error'                | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['t'] = 'Hl todo next'                     | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['u'] = 'Url encode'                       | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['w'] = '+workspace Switch right'          | endif
" if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['y'] = 'C string encode'                  | endif
if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['}'] = 'Next close brace'                 | endif

nmap <silent> [<Space> [o
nmap <silent> ]<Space> ]o
nmap <silent> [b :bprevious<cr>
nmap <silent> ]b :bnext<cr>
nmap ]c ]"
nmap [c ["
nmap <silent> [o :call append(line('.')-1, '')<cr>
nmap <silent> ]o :call append(line('.'), '')<cr>
nmap [s [s
nmap ]s ]s
nmap <silent> [w :tabprevious<cr>
nmap <silent> ]w :tabnext<cr>
nmap [{ [{
nmap ]} ]}
#+end_src

*** Git Gutter
#+begin_src vimrc
if has_key(plugs, 'vim-gitgutter')
    if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map.d = '+git Previous hunk' | endif
    if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map.d = '+git Next hunk'     | endif
    
    nmap [d <Plug>(GitGutterPrevHunk)
    nmap ]d <Plug>(GitGutterNextHunk)
endif
#+end_src

*** CoC
#+begin_src vimrc
if has_key(plugs, 'coc.nvim')
    if has_key(plugs, 'vim-which-key') | let g:l_sqr_bracket_map['e'] = 'Previous error' | endif
    if has_key(plugs, 'vim-which-key') | let g:r_sqr_bracket_map['e'] = 'Next error'     | endif
    
    nmap <silent> [e <Plug>(coc-diagnostic-prev)
    nmap <silent> ]e <Plug>(coc-diagnostic-next)
endif
#+end_src

** Arrows
#+begin_src vimrc
nnoremap <Up> :blast<cr>
nnoremap <Down> :bfirst<cr>
nnoremap <Left> :bprevious<cr>
nnoremap <Right> :bnext<cr>
#+end_src

** Folds
#+begin_src vimrc
noremap <tab> :norm za<cr>
noremap <tab><tab> :norm zA<cr>
noremap <S-tab> :norm zR<cr>
noremap <S-tab><S-tab> :norm zM<cr>
#+end_src

** Visual Selection Search
#+begin_src vimrc
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
#+end_src

** Alt
Command Mode
#+begin_src vimrc
map <A-x> :
#+end_src

Moving Lines
#+begin_src vimrc
nnoremap <A-k> :m-2<cr>==
nnoremap <A-j> :m+<cr>==
vnoremap <A-k> :m '<-2<cr>gv=gv
vnoremap <A-j> :m '>+1<cr>gv=gv
#+end_src

** Ctrl
*** CoC
#+begin_src vimrc
if has_key(plugs, 'coc.nvim')
    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()
endif
#+end_src
