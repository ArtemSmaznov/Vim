!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/artem/.vim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
#	settings/key-mappings.vim	/^vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m	language:Vim
$FZF_DEFAULT_COMMAND	settings/plugins/fzf.vim	/^let $FZF_DEFAULT_COMMAND="rg --files --hidden"$/;"	v	language:Vim
$FZF_DEFAULT_OPTS	settings/plugins/fzf.vim	/^let $FZF_DEFAULT_OPTS = '--info=inline'$/;"	v	language:Vim
$f	after/ftplugin/javascript.vim	/^inoremap <buffer> $f \/\/ --- PH<esc>FP2xi$/;"	m	language:Vim
$f	after/ftplugin/python.vim	/^inoremap <buffer> $f # --- <esc>a$/;"	m	language:Vim
$i	after/ftplugin/python.vim	/^inoremap <buffer> $i import $/;"	m	language:Vim
$p	after/ftplugin/python.vim	/^inoremap <buffer> $p print $/;"	m	language:Vim
$r	after/ftplugin/javascript.vim	/^inoremap <buffer> $r return $/;"	m	language:Vim
$r	after/ftplugin/python.vim	/^inoremap <buffer> $r return $/;"	m	language:Vim
*	settings/key-mappings.vim	/^vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m	language:Vim
0	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	language:JSON	array:explorer.keyMappings.global.<cr>
0	coc-settings.json	/^    "extensions": ["o", "a", "obj", "pyc"],$/;"	s	language:JSON	array:explorer.file.hiddenRules.extensions
0	coc-settings.json	/^    "filenames": ["__pycache__"],$/;"	s	language:JSON	array:explorer.file.hiddenRules.filenames
0	coc-settings.json	/^    "javascript",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^    "patternMatches": ["^\\\\."]$/;"	s	language:JSON	array:explorer.file.hiddenRules.patternMatches
1	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	language:JSON	array:explorer.keyMappings.global.<cr>
1	coc-settings.json	/^    "extensions": ["o", "a", "obj", "pyc"],$/;"	s	language:JSON	array:explorer.file.hiddenRules.extensions
1	coc-settings.json	/^    "typescript",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
10	coc-settings.json	/^    "html",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
11	coc-settings.json	/^    "css",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
12	coc-settings.json	/^    "lua",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
13	coc-settings.json	/^    "sh"$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	language:JSON	array:explorer.keyMappings.global.<cr>
2	coc-settings.json	/^    "extensions": ["o", "a", "obj", "pyc"],$/;"	s	language:JSON	array:explorer.file.hiddenRules.extensions
2	coc-settings.json	/^    "typescriptreact",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^    "extensions": ["o", "a", "obj", "pyc"],$/;"	s	language:JSON	array:explorer.file.hiddenRules.extensions
3	coc-settings.json	/^    "json",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^    "yaml",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
5	coc-settings.json	/^    "python",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^    "javascriptreact",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^    "typescript.tsx",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
8	coc-settings.json	/^    "graphql",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
9	coc-settings.json	/^    "markdown",$/;"	s	language:JSON	array:coc.preferences.formatOnSaveFiletypes
<C-/>	settings/plugins/commentary.vim	/^map <C-\/> gcl$/;"	m	language:Vim
<C-_>	settings/plugins/commentary.vim	/^map <C-_> gcl$/;"	m	language:Vim
<C-a>	after/ftplugin/javascript.vim	/^imap <C-a> alert();<esc>hi$/;"	m	language:Vim
<C-e>	settings/ui.vim	/^noremap <C-e> 4<C-e>$/;"	m	language:Vim
<C-h>	settings/key-mappings.vim	/^map <C-h> <C-W>h$/;"	m	language:Vim
<C-j>	settings/key-mappings.vim	/^map <C-j> <C-W>j$/;"	m	language:Vim
<C-k>	settings/key-mappings.vim	/^map <C-k> <C-W>k$/;"	m	language:Vim
<C-l>	settings/key-mappings.vim	/^map <C-l> <C-W>l$/;"	m	language:Vim
<C-n>	settings/plugins/nerdtree.vim	/^map <C-n> :NERDTreeToggle<cr> :wincmd p<cr>$/;"	m	language:Vim
<C-n>	settings/plugins/yankstack.vim	/^nmap <C-n> <Plug>yankstack_substitute_newer_paste$/;"	m	language:Vim
<C-p>	settings/plugins/yankstack.vim	/^nmap <C-p> <Plug>yankstack_substitute_older_paste$/;"	m	language:Vim
<C-s>	settings/plugins/coc.vim	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m	language:Vim
<C-s>	settings/plugins/coc.vim	/^xmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m	language:Vim
<C-t>	after/ftplugin/javascript.vim	/^imap <C-t> $log();<esc>hi$/;"	m	language:Vim
<C-y>	settings/ui.vim	/^noremap <C-y> 4<C-y>$/;"	m	language:Vim
<Down>	settings/key-mappings.vim	/^nnoremap <Down> :bfirst<cr>$/;"	m	language:Vim
<F2>	settings/plugins/coc.vim	/^nmap <F2> <Plug>(coc-rename)$/;"	m	language:Vim
<Left>	settings/key-mappings.vim	/^nnoremap <Left> :bprevious<cr>$/;"	m	language:Vim
<Right>	settings/key-mappings.vim	/^nnoremap <Right> :bnext<cr>$/;"	m	language:Vim
<S-TAB>	settings/plugins/coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m	language:Vim
<S-tab>	settings/key-mappings.vim	/^noremap <S-tab> :norm zR<cr>$/;"	m	language:Vim
<S-tab><S-tab>	settings/key-mappings.vim	/^noremap <S-tab><S-tab> :norm zM<cr>$/;"	m	language:Vim
<TAB>	settings/plugins/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m	language:Vim
<Up>	settings/key-mappings.vim	/^nnoremap <Up> :blast<cr>$/;"	m	language:Vim
<c-space>	settings/plugins/coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m	language:Vim
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m	language:Vim
<cr>	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	a	language:JSON	object:explorer.keyMappings.global
<cr>	settings/plugins/coc.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m	language:Vim
<leader>	settings/plugins/which-key.vim	/^nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>$/;"	m	language:Vim
<leader>	settings/plugins/which-key.vim	/^vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>$/;"	m	language:Vim
<leader>1	after/ftplugin/python.vim	/^map <buffer> <leader>1 \/class $/;"	m	language:Vim
<leader>2	after/ftplugin/python.vim	/^map <buffer> <leader>2 \/def $/;"	m	language:Vim
<leader><	settings/key-mappings.vim	/^map <leader>< :BufExplorerHorizontalSplit<cr>$/;"	m	language:Vim
<leader><Tab><Tab>	settings/key-mappings.vim	/^map <leader><Tab><Tab> :tabnext<cr>$/;"	m	language:Vim
<leader><Tab>c	settings/key-mappings.vim	/^map <leader><Tab>c :tabclose<cr>$/;"	m	language:Vim
<leader><Tab>m	settings/key-mappings.vim	/^map <leader><Tab>m :tabmove $/;"	m	language:Vim
<leader><Tab>n	settings/key-mappings.vim	/^map <leader><Tab>n :tabnew<cr>$/;"	m	language:Vim
<leader><Tab>o	settings/key-mappings.vim	/^map <leader><Tab>o :tabonly<cr>$/;"	m	language:Vim
<leader><leader>	settings/key-mappings.vim	/^map <silent> <leader><leader> :noh<cr>$/;"	m	language:Vim
<leader>C	after/ftplugin/python.vim	/^map <buffer> <leader>C ?class $/;"	m	language:Vim
<leader>D	after/ftplugin/python.vim	/^map <buffer> <leader>D ?def $/;"	m	language:Vim
<leader>`	settings/key-mappings.vim	/^map <leader>` :term<cr>$/;"	m	language:Vim
<leader>bK	settings/key-mappings.vim	/^map <leader>bK :bufdo bd<cr>$/;"	m	language:Vim
<leader>bN	settings/key-mappings.vim	/^map <leader>bN :tabe<cr>$/;"	m	language:Vim
<leader>b[	settings/key-mappings.vim	/^map <leader>b[ :bprevious<cr>$/;"	m	language:Vim
<leader>b]	settings/key-mappings.vim	/^map <leader>b] :bnext<cr>$/;"	m	language:Vim
<leader>bd	settings/key-mappings.vim	/^map <leader>bd :Bclose<cr>$/;"	m	language:Vim
<leader>bk	settings/key-mappings.vim	/^map <leader>bk :Bclose<cr>$/;"	m	language:Vim
<leader>bl	settings/key-mappings.vim	/^map <leader>bl :BufExplorerHorizontalSplit<cr>$/;"	m	language:Vim
<leader>bn	settings/key-mappings.vim	/^map <leader>bn :bnext<cr>$/;"	m	language:Vim
<leader>bp	settings/key-mappings.vim	/^map <leader>bp :bprevious<cr>$/;"	m	language:Vim
<leader>c<space>	settings/plugins/coc.vim	/^nmap <leader>c<space> <Plug>(coc-codeaction)$/;"	m	language:Vim
<leader>ca	settings/plugins/coc.vim	/^nmap <leader>ca  <Plug>(coc-fix-current)$/;"	m	language:Vim
<leader>cc	settings/plugins/coc.vim	/^nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>$/;"	m	language:Vim
<leader>cd	settings/plugins/coc.vim	/^nnoremap <silent> <leader>cd  :<C-u>CocList diagnostics<cr>$/;"	m	language:Vim
<leader>ce	settings/plugins/coc.vim	/^nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>$/;"	m	language:Vim
<leader>cf	settings/plugins/coc.vim	/^nmap <leader>cf  <Plug>(coc-format-selected)$/;"	m	language:Vim
<leader>cf	settings/plugins/coc.vim	/^xmap <leader>cf  <Plug>(coc-format-selected)$/;"	m	language:Vim
<leader>cj	settings/plugins/coc.vim	/^nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>$/;"	m	language:Vim
<leader>ck	settings/plugins/coc.vim	/^nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>$/;"	m	language:Vim
<leader>co	settings/plugins/coc.vim	/^nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>$/;"	m	language:Vim
<leader>cp	settings/plugins/coc.vim	/^nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>$/;"	m	language:Vim
<leader>cs	settings/plugins/coc.vim	/^nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>$/;"	m	language:Vim
<leader>ct	settings/plugins/tabularize.vim	/^map <leader>ct :Tabularize \/$/;"	m	language:Vim
<leader>cv	settings/plugins/coc.vim	/^nmap <leader>cv <Plug>(coc-codeaction-selected)$/;"	m	language:Vim
<leader>cv	settings/plugins/coc.vim	/^xmap <leader>cv <Plug>(coc-codeaction-selected)$/;"	m	language:Vim
<leader>fS	settings/key-mappings.vim	/^map <leader>fS :wa<cr>$/;"	m	language:Vim
<leader>fc	settings/key-mappings.vim	/^map <leader>fc :cd %:p:h<cr>:pwd<cr>$/;"	m	language:Vim
<leader>feda	settings/key-mappings.vim	/^map <leader>feda :e! $HOME\/.config\/aliasrc<cr>$/;"	m	language:Vim
<leader>fedb	settings/key-mappings.vim	/^map <leader>fedb :e! $HOME\/.bashrc<cr>$/;"	m	language:Vim
<leader>fedz	settings/key-mappings.vim	/^map <leader>fedz :e! $HOME\/.zshrc<cr>$/;"	m	language:Vim
<leader>feqb	settings/key-mappings.vim	/^map <leader>feqb :e! $HOME\/.config\/qtile\/lib\/bars.py<cr>$/;"	m	language:Vim
<leader>feqg	settings/key-mappings.vim	/^map <leader>feqg :e! $HOME\/.config\/qtile\/settings\/groups.py<cr>$/;"	m	language:Vim
<leader>feqk	settings/key-mappings.vim	/^map <leader>feqk :e! $HOME\/.config\/qtile\/keys\/bindings.py<cr>$/;"	m	language:Vim
<leader>feql	settings/key-mappings.vim	/^map <leader>feql :e! $HOME\/.config\/qtile\/settings\/layouts.py<cr>$/;"	m	language:Vim
<leader>feqt	settings/key-mappings.vim	/^map <leader>feqt :e! $HOME\/.config\/qtile\/theme\/default.py<cr>$/;"	m	language:Vim
<leader>feqw	settings/key-mappings.vim	/^map <leader>feqw :e! $HOME\/.config\/qtile\/lib\/widgets\/general.py<cr>$/;"	m	language:Vim
<leader>fevb	settings/key-mappings.vim	/^map <leader>fevb :e! $HOME\/.vim\/settings\/basic.vim<cr>$/;"	m	language:Vim
<leader>fevk	settings/key-mappings.vim	/^map <leader>fevk :e! $HOME\/.vim\/settings\/key-mappings.vim<cr>$/;"	m	language:Vim
<leader>fevp	settings/key-mappings.vim	/^map <leader>fevp :e! $HOME\/.vim\/settings\/plugins.vim<cr>$/;"	m	language:Vim
<leader>fevr	settings/key-mappings.vim	/^map <leader>fevr :e! $HOME\/.vim\/vimrc<cr>$/;"	m	language:Vim
<leader>fevu	settings/key-mappings.vim	/^map <leader>fevu :e! $HOME\/.vim\/settings\/ui.vim<cr>$/;"	m	language:Vim
<leader>fevw	settings/key-mappings.vim	/^map <leader>fevw :e! $HOME\/.vim\/settings\/plugins\/which-key.vim<cr>$/;"	m	language:Vim
<leader>ff	settings/plugins/fzf.vim	/^map <leader>ff :Files<CR>$/;"	m	language:Vim
<leader>fr	settings/plugins/fzf.vim	/^map <leader>fr :History<CR>$/;"	m	language:Vim
<leader>fs	settings/key-mappings.vim	/^map <leader>fs :write<cr>$/;"	m	language:Vim
<leader>fv	settings/key-mappings.vim	/^map <leader>fv :vimgrep **\/* $/;"	m	language:Vim
<leader>gd	settings/plugins/gitGutter.vim	/^nnoremap <silent> <leader>gd :vertical Gdiffsplit<cr>$/;"	m	language:Vim
<leader>gg	settings/plugins/gitGutter.vim	/^nnoremap <silent> <leader>gg :vertical Gstatus<cr>$/;"	m	language:Vim
<leader>gp	settings/plugins/gitGutter.vim	/^nmap <leader>gp <Plug>(GitGutterPreviewHunk)$/;"	m	language:Vim
<leader>gs	settings/plugins/gitGutter.vim	/^map <leader>gs <Plug>(GitGutterStageHunk)$/;"	m	language:Vim
<leader>gu	settings/plugins/gitGutter.vim	/^nmap <leader>gu <Plug>(GitGutterUndoHunk)$/;"	m	language:Vim
<leader>hb	settings/plugins/fzf.vim	/^map <leader>hb :Maps<CR>$/;"	m	language:Vim
<leader>hh	settings/plugins/fzf.vim	/^nnoremap <leader>hh :Helptags<CR>$/;"	m	language:Vim
<leader>hk	settings/plugins/coc.vim	/^nnoremap <leader>hk :call <SID>show_documentation()<CR>$/;"	m	language:Vim
<leader>hre	settings/key-mappings.vim	/^map <leader>hre :source $MYVIMRC<cr>$/;"	m	language:Vim
<leader>hrp	settings/plugins.vim	/^map <leader>hrp :PlugInstall --sync<cr>$/;"	m	language:Vim
<leader>hrr	settings/key-mappings.vim	/^map <leader>hrr :source %<cr>$/;"	m	language:Vim
<leader>ht	settings/plugins/fzf.vim	/^nnoremap <leader>ht :Colors<CR>$/;"	m	language:Vim
<leader>it	settings/key-mappings.vim	/^map <leader>it :r !toilet -f pagga $/;"	m	language:Vim
<leader>n	settings/plugins/nerdtree.vim	/^map <leader>n :NERDTreeFind<cr> $/;"	m	language:Vim
<leader>p'	settings/plugins/fzf.vim	/^nnoremap <leader>p' :Marks<CR>$/;"	m	language:Vim
<leader>p/	settings/plugins/fzf.vim	/^nnoremap <leader>p\/ :History\/<CR>$/;"	m	language:Vim
<leader>p:	settings/plugins/fzf.vim	/^nnoremap <leader>p: :History:<CR>$/;"	m	language:Vim
<leader>p`	settings/plugins/floaterm.vim	/^map <leader>p` :FloatermToggle<cr>$/;"	m	language:Vim
<leader>pb	settings/plugins/fzf.vim	/^map <leader>pb :Buffers<CR>$/;"	m	language:Vim
<leader>pc	settings/plugins/fzf.vim	/^map <leader>pc :Commands<CR>$/;"	m	language:Vim
<leader>pf	settings/plugins/fzf.vim	/^map <leader>pf :Filetypes<CR>$/;"	m	language:Vim
<leader>pp	settings/plugins/floaterm.vim	/^map <leader>pp :FloatermNew python<cr>$/;"	m	language:Vim
<leader>pr	settings/plugins/floaterm.vim	/^map <leader>pr :FloatermNew ranger<cr>$/;"	m	language:Vim
<leader>pv	settings/plugins/floaterm.vim	/^map <leader>pv :FloatermNew vifm<cr>$/;"	m	language:Vim
<leader>pw	settings/plugins/fzf.vim	/^map <leader>pw :Windows<CR>$/;"	m	language:Vim
<leader>r	settings/plugins/ack.vim	/^vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>$/;"	m	language:Vim
<leader>sB	settings/plugins/fzf.vim	/^map <leader>sB :Lines<CR>$/;"	m	language:Vim
<leader>sT	settings/plugins/fzf.vim	/^nnoremap <leader>sT :Tags<CR>$/;"	m	language:Vim
<leader>sa	settings/plugins/ack.vim	/^map <leader>sa :Ack! $/;"	m	language:Vim
<leader>sb	settings/plugins/ctrlp.vim	/^map <leader>sb :CtrlPBuffer<cr>$/;"	m	language:Vim
<leader>sb	settings/plugins/fzf.vim	/^map <leader>sb :BLines<CR>$/;"	m	language:Vim
<leader>sc	settings/plugins/ack.vim	/^map <leader>sc :botright cope<cr>$/;"	m	language:Vim
<leader>sp	settings/plugins/ctrlp.vim	/^map <leader>sp :CtrlP<cr>$/;"	m	language:Vim
<leader>sp	settings/plugins/fzf.vim	/^nnoremap <leader>sp :Rg<CR>$/;"	m	language:Vim
<leader>sr	settings/plugins/ctrlp.vim	/^map <leader>sr :CtrlPMRU<CR>$/;"	m	language:Vim
<leader>st	settings/plugins/fzf.vim	/^nnoremap <leader>st :BTags<CR>$/;"	m	language:Vim
<leader>tc	settings/plugins/colorizer.vim	/^nnoremap <leader>tc :ColorToggle<cr>$/;"	m	language:Vim
<leader>tn	settings/plugins/coc.vim	/^nmap <leader>tn :CocCommand explorer<CR>$/;"	m	language:Vim
<leader>tp	settings/key-mappings.vim	/^map <leader>tp :setlocal paste!<cr>$/;"	m	language:Vim
<leader>ts	settings/key-mappings.vim	/^map <leader>ts :setlocal spell!<cr>$/;"	m	language:Vim
<leader>ttl	settings/key-mappings.vim	/^nmap <leader>ttl :exe "tabn ".g:lasttab<CR>$/;"	m	language:Vim
<leader>w+	settings/key-mappings.vim	/^map <leader>w+ :resize +5<cr>$/;"	m	language:Vim
<leader>w-	settings/key-mappings.vim	/^map <leader>w- :resize -5<cr>$/;"	m	language:Vim
<leader>w<	settings/key-mappings.vim	/^map <leader>w< :vertical :resize -5<cr>$/;"	m	language:Vim
<leader>w=	settings/key-mappings.vim	/^map <leader>w= <C-w>=$/;"	m	language:Vim
<leader>w>	settings/key-mappings.vim	/^map <leader>w> :vertical :resize +5<cr>$/;"	m	language:Vim
<leader>wH	settings/key-mappings.vim	/^map <leader>wH <C-w>H$/;"	m	language:Vim
<leader>wJ	settings/key-mappings.vim	/^map <leader>wJ <C-w>J$/;"	m	language:Vim
<leader>wK	settings/key-mappings.vim	/^map <leader>wK <C-w>K$/;"	m	language:Vim
<leader>wL	settings/key-mappings.vim	/^map <leader>wL <C-w>L$/;"	m	language:Vim
<leader>wR	settings/key-mappings.vim	/^map <leader>wR <C-w>R$/;"	m	language:Vim
<leader>wS	settings/key-mappings.vim	/^map <leader>wS <C-w>S$/;"	m	language:Vim
<leader>wT	settings/key-mappings.vim	/^map <leader>wT <C-w>T$/;"	m	language:Vim
<leader>wV	settings/key-mappings.vim	/^map <leader>wV <C-w>V$/;"	m	language:Vim
<leader>wW	settings/key-mappings.vim	/^map <leader>wW <C-w>W$/;"	m	language:Vim
<leader>w\\|	settings/key-mappings.vim	/^map <leader>w\\| <C-w>\\|$/;"	m	language:Vim
<leader>w_	settings/key-mappings.vim	/^map <leader>w_ <C-w>_$/;"	m	language:Vim
<leader>wb	settings/key-mappings.vim	/^map <leader>wb <C-w>b$/;"	m	language:Vim
<leader>wc	settings/key-mappings.vim	/^map <leader>wc <C-w>c$/;"	m	language:Vim
<leader>wd	settings/key-mappings.vim	/^map <leader>wd <C-w>c$/;"	m	language:Vim
<leader>wh	settings/key-mappings.vim	/^map <leader>wh <C-w>h$/;"	m	language:Vim
<leader>wj	settings/key-mappings.vim	/^map <leader>wj <C-w>j$/;"	m	language:Vim
<leader>wk	settings/key-mappings.vim	/^map <leader>wk <C-w>k$/;"	m	language:Vim
<leader>wl	settings/key-mappings.vim	/^map <leader>wl <C-w>l$/;"	m	language:Vim
<leader>wn	settings/key-mappings.vim	/^map <leader>wn <C-w>n$/;"	m	language:Vim
<leader>wo	settings/key-mappings.vim	/^map <leader>wo <C-w>o$/;"	m	language:Vim
<leader>wp	settings/key-mappings.vim	/^map <leader>wp <C-w>p$/;"	m	language:Vim
<leader>wq	settings/key-mappings.vim	/^map <leader>wq <C-w>q$/;"	m	language:Vim
<leader>wr	settings/key-mappings.vim	/^map <leader>wr <C-w>r$/;"	m	language:Vim
<leader>ws	settings/key-mappings.vim	/^map <leader>ws <C-w>s$/;"	m	language:Vim
<leader>wt	settings/key-mappings.vim	/^map <leader>wt <C-w>t$/;"	m	language:Vim
<leader>wv	settings/key-mappings.vim	/^map <leader>wv <C-w>v$/;"	m	language:Vim
<leader>ww	settings/key-mappings.vim	/^map <leader>ww <C-w>w$/;"	m	language:Vim
<leader>x	settings/plugins/coc.vim	/^xmap <leader>x  <Plug>(coc-convert-snippet)$/;"	m	language:Vim
<leader>yl	settings/plugins/yankstack.vim	/^nmap <leader>yl :Yanks<cr>$/;"	m	language:Vim
<localleader>	settings/plugins/which-key.vim	/^nnoremap <silent> <localleader> :<c-u>WhichKey ','<CR>$/;"	m	language:Vim
<localleader>	settings/plugins/which-key.vim	/^vnoremap <silent> <localleader> :<c-u>WhichKeyVisual ','<CR>$/;"	m	language:Vim
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m	language:Vim
<tab>	settings/key-mappings.vim	/^noremap <tab> :norm za<cr>$/;"	m	language:Vim
<tab><tab>	settings/key-mappings.vim	/^noremap <tab><tab> :norm zA<cr>$/;"	m	language:Vim
Bclose	settings/basic.vim	/^command! Bclose call <SID>BufcloseCloseIt()$/;"	c	language:Vim
BufcloseCloseIt	settings/basic.vim	/^function! <SID>BufcloseCloseIt()$/;"	f	language:Vim
CleanExtraSpaces	settings/basic.vim	/^fun! CleanExtraSpaces()$/;"	f	language:Vim
CmdLine	settings/basic.vim	/^function! CmdLine(str)$/;"	f	language:Vim
CurrentFileDir	settings/basic.vim	/^func! CurrentFileDir(cmd)$/;"	f	language:Vim
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m	language:Vim
DeleteTillSlash	settings/basic.vim	/^func! DeleteTillSlash()$/;"	f	language:Vim
Files	settings/plugins/fzf.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c	language:Vim
Fold	settings/plugins/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c	language:Vim
FoldText	after/ftplugin/javascript.vim	/^  function! FoldText()$/;"	f	language:Vim
Format	settings/plugins/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c	language:Vim
GGrep	settings/plugins/fzf.vim	/^command! -bang -nargs=* GGrep$/;"	c	language:Vim
HasPaste	settings/basic.vim	/^function! HasPaste()$/;"	f	language:Vim
J	settings/key-mappings.vim	/^nnoremap J :m+<cr>==$/;"	m	language:Vim
J	settings/key-mappings.vim	/^vnoremap J :m '>+1<cr>gv=gv$/;"	m	language:Vim
JavaScriptFold	after/ftplugin/javascript.vim	/^function! JavaScriptFold() $/;"	f	language:Vim
K	settings/key-mappings.vim	/^nnoremap K :m-2<cr>==$/;"	m	language:Vim
K	settings/key-mappings.vim	/^vnoremap K :m '<-2<cr>gv=gv$/;"	m	language:Vim
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m	language:Vim
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m	language:Vim
Lua.completion.enable	coc-settings.json	/^  "Lua.completion.enable": true,$/;"	b	language:JSON
Lua.hover.enable	coc-settings.json	/^  "Lua.hover.enable": true,$/;"	b	language:JSON
NERDTreeIgnore	settings/plugins/nerdtree.vim	/^let NERDTreeIgnore = ['^node_modules','\\.pyc$', '__pycache__']$/;"	v	language:Vim
NERDTreeShowHidden	settings/plugins/nerdtree.vim	/^let NERDTreeShowHidden=1$/;"	v	language:Vim
OR	settings/plugins/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c	language:Vim
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c	language:Vim
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c	language:Vim
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c	language:Vim
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c	language:Vim
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a	language:Vim
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c	language:Vim
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c	language:Vim
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c	language:Vim
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c	language:Vim
Prettier	settings/plugins/coc.vim	/^command! -nargs=0 Prettier :CocCommand prettier.formatFile$/;"	c	language:Vim
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m	language:Vim
RG	settings/plugins/fzf.vim	/^command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)$/;"	c	language:Vim
Rg	settings/plugins/fzf.vim	/^command! -bang -nargs=* Rg$/;"	c	language:Vim
RipgrepFzf	settings/plugins/fzf.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	f	language:Vim
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m	language:Vim
Si	settings/plugins/surround.vim	/^vmap Si S(i_<esc>f)$/;"	m	language:Vim
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m	language:Vim
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m	language:Vim
VisualSelection	settings/basic.vim	/^function! VisualSelection(direction, extra_filter) range$/;"	f	language:Vim
W	settings/key-mappings.vim	/^command! W execute 'w !sudo tee % > \/dev\/null' <bar> edit!$/;"	c	language:Vim
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m	language:Vim
[	settings/plugins/which-key.vim	/^nnoremap <silent> [ :<c-u>WhichKey '['<CR>$/;"	m	language:Vim
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m	language:Vim
[g	settings/plugins/coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m	language:Vim
]	settings/plugins/which-key.vim	/^nnoremap <silent> ] :<c-u>WhichKey ']'<CR>$/;"	m	language:Vim
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m	language:Vim
]g	settings/plugins/coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m	language:Vim
af	settings/plugins/coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m	language:Vim
af	settings/plugins/coc.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m	language:Vim
coc.preferences.colorSupport	coc-settings.json	/^  "coc.preferences.colorSupport": true,$/;"	b	language:JSON
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a	language:JSON
coc.preferences.formatOnType	coc-settings.json	/^  "coc.preferences.formatOnType": true,$/;"	b	language:JSON
css.colorDecorators.enable	coc-settings.json	/^  "css.colorDecorators.enable": true,$/;"	b	language:JSON
css.completion.completePropertyWithSemicolon	coc-settings.json	/^  "css.completion.completePropertyWithSemicolon": true,$/;"	b	language:JSON
css.completion.triggerPropertyValueCompletion	coc-settings.json	/^  "css.completion.triggerPropertyValueCompletion": true,$/;"	b	language:JSON
css.validate	coc-settings.json	/^  "css.validate": true,$/;"	b	language:JSON
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m	language:Vim
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m	language:Vim
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m	language:Vim
eslint.autoFixOnSave	coc-settings.json	/^  "eslint.autoFixOnSave": true,$/;"	b	language:JSON
explorer.buffer.tabOnly	coc-settings.json	/^  "explorer.buffer.tabOnly": false,$/;"	b	language:JSON
explorer.file.autoReveal	coc-settings.json	/^  "explorer.file.autoReveal": true,$/;"	b	language:JSON
explorer.file.hiddenRules	coc-settings.json	/^  "explorer.file.hiddenRules": {$/;"	o	language:JSON
explorer.file.revealWhenOpen	coc-settings.json	/^  "explorer.file.revealWhenOpen": true,$/;"	b	language:JSON
explorer.file.showHiddenFiles	coc-settings.json	/^  "explorer.file.showHiddenFiles": false,$/;"	b	language:JSON
explorer.filename.colored.enable	coc-settings.json	/^  "explorer.filename.colored.enable": true,$/;"	b	language:JSON
explorer.focus	coc-settings.json	/^  "explorer.focus": true,$/;"	b	language:JSON
explorer.git.enable	coc-settings.json	/^  "explorer.git.enable": true,$/;"	b	language:JSON
explorer.git.showIgnored	coc-settings.json	/^  "explorer.git.showIgnored": true,$/;"	b	language:JSON
explorer.icon.enableNerdfont	coc-settings.json	/^  "explorer.icon.enableNerdfont": true,$/;"	b	language:JSON
explorer.icon.enableVimDevicons	coc-settings.json	/^  "explorer.icon.enableVimDevicons": true,$/;"	b	language:JSON
explorer.keyMappings.global	coc-settings.json	/^  "explorer.keyMappings.global": {$/;"	o	language:JSON
explorer.position	coc-settings.json	/^  "explorer.position": "left",$/;"	s	language:JSON
explorer.previewAction.onHover	coc-settings.json	/^  "explorer.previewAction.onHover": false,$/;"	b	language:JSON
explorer.width	coc-settings.json	/^  "explorer.width": 40,$/;"	n	language:JSON
extensions	coc-settings.json	/^    "extensions": ["o", "a", "obj", "pyc"],$/;"	a	language:JSON	object:explorer.file.hiddenRules
filenames	coc-settings.json	/^    "filenames": ["__pycache__"],$/;"	a	language:JSON	object:explorer.file.hiddenRules
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a	language:Vim
g-	settings/key-mappings.vim	/^noremap g- <C-x>$/;"	m	language:Vim
g:AutoPairsFlyMode	settings/plugins/auto-pairs.vim	/^let g:AutoPairsFlyMode = 1$/;"	v	language:Vim
g:AutoPairsShortcutBackInsert	settings/plugins/auto-pairs.vim	/^let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v	language:Vim
g:NERDTreeGitStatusUseNerdFonts	settings/plugins/nerdtree.vim	/^let g:NERDTreeGitStatusUseNerdFonts = 1 " you should install nerdfonts by yourself. default: 0$/;"	v	language:Vim
g:NERDTreeGitStatusWithFlags	settings/plugins/nerdtree.vim	/^let g:NERDTreeGitStatusWithFlags = 1$/;"	v	language:Vim
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v	language:Vim
g:ackprg	settings/plugins/ack.vim	/^  let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v	language:Vim
g:airline#extensions#coc#enabled	settings/plugins/airline.vim	/^let g:airline#extensions#coc#enabled = 1$/;"	v	language:Vim
g:airline#extensions#fzf#enabled	settings/plugins/airline.vim	/^let g:airline#extensions#fzf#enabled = 1$/;"	v	language:Vim
g:airline#extensions#tabline#enabled	settings/plugins/airline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v	language:Vim
g:airline#extensions#tabline#show_buffers	settings/plugins/airline.vim	/^let g:airline#extensions#tabline#show_buffers = 1$/;"	v	language:Vim
g:airline#extensions#tabline#show_splits	settings/plugins/airline.vim	/^let g:airline#extensions#tabline#show_splits = 1$/;"	v	language:Vim
g:airline#extensions#tabline#show_tab_nr	settings/plugins/airline.vim	/^let g:airline#extensions#tabline#show_tab_nr = 1$/;"	v	language:Vim
g:airline#extensions#tmuxline#enabled	settings/plugins/airline.vim	/^let g:airline#extensions#tmuxline#enabled = 1$/;"	v	language:Vim
g:airline#extensions#tmuxline#snapshot_file	settings/plugins/airline.vim	/^let g:airline#extensions#tmuxline#snapshot_file =$/;"	v	language:Vim
g:airline_powerline_fonts	settings/plugins/airline.vim	/^let g:airline_powerline_fonts = 1$/;"	v	language:Vim
g:bracket_map	settings/plugins/coc.vim	/^let g:bracket_map.g = 'Coc Problem'$/;"	v	language:Vim
g:bracket_map	settings/plugins/gitGutter.vim	/^let g:bracket_map.c = 'Git Hunk'$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map = {}$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map.s = 'Spell Check Problem'$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map['"'] = 'Move around comments'$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map['M'] = 'Move around'$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map['['] = 'Move around functions'$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map[']'] = 'Move around functions'$/;"	v	language:Vim
g:bracket_map	settings/plugins/which-key.vim	/^let g:bracket_map['m'] = 'Move around'$/;"	v	language:Vim
g:bufExplorerDefaultHelp	settings/plugins/buffExplorer.vim	/^let g:bufExplorerDefaultHelp=0$/;"	v	language:Vim
g:bufExplorerDisableDefaultKeyMapping	settings/plugins/buffExplorer.vim	/^let g:bufExplorerDisableDefaultKeyMapping=1$/;"	v	language:Vim
g:bufExplorerFindActive	settings/plugins/buffExplorer.vim	/^let g:bufExplorerFindActive=1$/;"	v	language:Vim
g:bufExplorerShowRelativePath	settings/plugins/buffExplorer.vim	/^let g:bufExplorerShowRelativePath=1$/;"	v	language:Vim
g:bufExplorerSortBy	settings/plugins/buffExplorer.vim	/^let g:bufExplorerSortBy='name'$/;"	v	language:Vim
g:cmd	settings/basic.vim	/^  let g:cmd = getcmdline()$/;"	v	language:Vim
g:cmd_edited	settings/basic.vim	/^      let g:cmd_edited = substitute(g:cmd, "\\\\(.*\\[\/\\]\\\\).*\/", "\\\\1", "")$/;"	v	language:Vim
g:cmd_edited	settings/basic.vim	/^      let g:cmd_edited = substitute(g:cmd, "\\\\(.*\\[\\\\\\\\\\]\\\\).*\\[\\\\\\\\\\]", "\\\\1"/;"	v	language:Vim
g:cmd_edited	settings/basic.vim	/^    let g:cmd_edited = substitute(g:cmd, "\\\\(.*\\[\/\\]\\\\).*", "\\\\1", "")$/;"	v	language:Vim
g:cmd_edited	settings/basic.vim	/^    let g:cmd_edited = substitute(g:cmd, "\\\\(.*\\[\\\\\\\\]\\\\).*", "\\\\1", "")$/;"	v	language:Vim
g:coc_global_extensions	settings/plugins/coc.vim	/^let g:coc_global_extensions = [$/;"	v	language:Vim
g:colorizer_auto_color	settings/plugins/colorizer.vim	/^let g:colorizer_auto_color=1$/;"	v	language:Vim
g:colorizer_auto_filetype	settings/plugins/colorizer.vim	/^let g:colorizer_auto_filetype='css,html,lua,js,vim'$/;"	v	language:Vim
g:ctrlp_custom_ignore	settings/plugins/ctrlp.vim	/^let g:ctrlp_custom_ignore = 'node_modules\\|^\\.DS_Store\\|^\\.git\\|^\\.coffee'$/;"	v	language:Vim
g:ctrlp_max_height	settings/plugins/ctrlp.vim	/^let g:ctrlp_max_height = 20$/;"	v	language:Vim
g:ctrlp_working_path_mode	settings/plugins/ctrlp.vim	/^let g:ctrlp_working_path_mode = 0$/;"	v	language:Vim
g:floaterm_autoclose	settings/plugins/floaterm.vim	/^let g:floaterm_autoclose = 1$/;"	v	language:Vim
g:floaterm_keymap_new	settings/plugins/floaterm.vim	/^let g:floaterm_keymap_new    = '<F7>'$/;"	v	language:Vim
g:floaterm_keymap_next	settings/plugins/floaterm.vim	/^let g:floaterm_keymap_next   = '<F9>'$/;"	v	language:Vim
g:floaterm_keymap_prev	settings/plugins/floaterm.vim	/^let g:floaterm_keymap_prev   = '<F8>'$/;"	v	language:Vim
g:floaterm_keymap_toggle	settings/plugins/floaterm.vim	/^let g:floaterm_keymap_toggle = '<F12>'$/;"	v	language:Vim
g:floaterm_opener	settings/plugins/floaterm.vim	/^let g:floaterm_opener = 'tabe'$/;"	v	language:Vim
g:fzf_colors	settings/plugins/fzf.vim	/^let g:fzf_colors =$/;"	v	language:Vim
g:fzf_history_dir	settings/plugins/fzf.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v	language:Vim
g:fzf_layout	settings/plugins/fzf.vim	/^let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset'/;"	v	language:Vim
g:fzf_tags_command	settings/plugins/fzf.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v	language:Vim
g:gitgutter_enabled	settings/plugins/gitGutter.vim	/^let g:gitgutter_enabled=1$/;"	v	language:Vim
g:lasttab	settings/key-mappings.vim	/^let g:lasttab = 1$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline = {$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.active = {$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.colorscheme = 'jellybeans'$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.inactive = { $/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.separator = { 'left': ' ', 'right': ' ' }$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.subseparator = { 'left': '|', 'right': '|' }$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.tab = {$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.tabline_separator = { 'left': ' ', 'right': ' ' }$/;"	v	language:Vim
g:lightline	settings/plugins/lightline.vim	/^let g:lightline.tabline_subseparator = { 'left': '|', 'right': '|' }$/;"	v	language:Vim
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v	language:Vim
g:local_key_map	settings/plugins/which-key.vim	/^let g:local_key_map = {}$/;"	v	language:Vim
g:mapleader	settings/basic.vim	/^let g:mapleader = " "$/;"	v	language:Vim
g:maplocalleader	settings/basic.vim	/^let g:maplocalleader = ","$/;"	v	language:Vim
g:minimap_close	settings/plugins/minimap.vim	/^let g:minimap_close='<leader>tMc'$/;"	v	language:Vim
g:minimap_show	settings/plugins/minimap.vim	/^let g:minimap_show='<leader>tMo'$/;"	v	language:Vim
g:minimap_toggle	settings/plugins/minimap.vim	/^let g:minimap_toggle='<leader>tm'$/;"	v	language:Vim
g:minimap_update	settings/plugins/minimap.vim	/^let g:minimap_update='<leader>tMu'$/;"	v	language:Vim
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v	language:Vim
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v	language:Vim
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v	language:Vim
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v	language:Vim
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v	language:Vim
g:sneak#label	settings/plugins/sneak.vim	/^let g:sneak#label = 1$/;"	v	language:Vim
g:sneak#s_next	settings/plugins/sneak.vim	/^let g:sneak#s_next = 1$/;"	v	language:Vim
g:sneak#use_ic_scs	settings/plugins/sneak.vim	/^let g:sneak#use_ic_scs = 1$/;"	v	language:Vim
g:system_copy#copy_command	settings/plugins/system-copy.vim	/^let g:system_copy#copy_command='xclip -sel clipboard'$/;"	v	language:Vim
g:system_copy#paste_command	settings/plugins/system-copy.vim	/^let g:system_copy#paste_command='xclip -sel clipboard -o'$/;"	v	language:Vim
g:tmuxline_preset	settings/plugins/tmuxline.vim	/^let g:tmuxline_preset = {$/;"	v	language:Vim
g:vim_tags_auto_generate	settings/plugins/tags.vim	/^let g:vim_tags_auto_generate = 1$/;"	v	language:Vim
g:vim_tags_directories	settings/plugins/tags.vim	/^let g:vim_tags_directories = [".git", ".hg", ".svn", ".bzr", "_darcs", "CVS"]$/;"	v	language:Vim
g:vim_tags_ignore_files	settings/plugins/tags.vim	/^let g:vim_tags_ignore_files = ['.gitignore', '.svnignore', '.cvsignore']$/;"	v	language:Vim
g:vimwiki_list	settings/plugins/vimwiki.vim	/^let g:vimwiki_list = [{$/;"	v	language:Vim
g:which_key_centered	settings/plugins/which-key.vim	/^let g:which_key_centered = 0$/;"	v	language:Vim
g:which_key_default_group_name	settings/plugins/which-key.vim	/^let g:which_key_default_group_name = '+group'$/;"	v	language:Vim
g:which_key_display_names	settings/plugins/which-key.vim	/^let g:which_key_display_names = { ' ': '⎵', '<CR>': '↵', '<TAB>': '⇆' }$/;"	v	language:Vim
g:which_key_fallback_to_native_key	settings/plugins/which-key.vim	/^let g:which_key_fallback_to_native_key=1$/;"	v	language:Vim
g:which_key_flatten	settings/plugins/which-key.vim	/^let g:which_key_flatten = 1$/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c[' '] = 'Code action' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['a'] = 'Fix current' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['c'] = 'Commands' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['d'] = 'Diagnostics' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['e'] = 'Extensions' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['f'] = 'Format' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['j'] = 'Default action for next item' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['k'] = 'Default action for previous item' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['o'] = 'Outline' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['p'] = 'Resume latest coc list' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['s'] = 'Symbols' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.c['v'] = 'Code action selected' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.h['k'] = 'Search Documentation' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map.t['n'] = 'File tree' $/;"	v	language:Vim
g:which_key_map	settings/plugins/coc.vim	/^let g:which_key_map['x'] = 'Convert to snippet' $/;"	v	language:Vim
g:which_key_map	settings/plugins/colorizer.vim	/^let g:which_key_map.t['c'] = 'Color highlights' $/;"	v	language:Vim
g:which_key_map	settings/plugins/floaterm.vim	/^let g:which_key_map.p['`'] = 'Terminal' $/;"	v	language:Vim
g:which_key_map	settings/plugins/floaterm.vim	/^let g:which_key_map.p['p'] = 'Python' $/;"	v	language:Vim
g:which_key_map	settings/plugins/floaterm.vim	/^let g:which_key_map.p['r'] = 'Ranger' $/;"	v	language:Vim
g:which_key_map	settings/plugins/floaterm.vim	/^let g:which_key_map.p['v'] = 'Vifm' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.f['f'] = 'Find file' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.f['r'] = 'Recent files' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.h['b']   = 'Bindings' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.h['h']   = 'Search Help' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.h['t']   = 'Load theme' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p["'"] = 'Search marks' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p[':'] = 'Commands history' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p['\/'] = 'Search history' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p['b'] = 'Switch buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p['c'] = 'Search all commands' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p['f'] = 'Switch filetype' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.p['w'] = 'Switch window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.s['B'] = 'Search all open buffers' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.s['T'] = 'Search Tags in all buffers' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.s['b'] = 'Search buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.s['p'] = 'Search project' $/;"	v	language:Vim
g:which_key_map	settings/plugins/fzf.vim	/^let g:which_key_map.s['t'] = 'Search Tags in buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/gitGutter.vim	/^let g:which_key_map.g      = { 'name' : '+git' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/gitGutter.vim	/^let g:which_key_map.g['d'] = 'Diff Split' $/;"	v	language:Vim
g:which_key_map	settings/plugins/gitGutter.vim	/^let g:which_key_map.g['g'] = 'Status' $/;"	v	language:Vim
g:which_key_map	settings/plugins/gitGutter.vim	/^let g:which_key_map.g['p'] = 'Preview hunk' $/;"	v	language:Vim
g:which_key_map	settings/plugins/gitGutter.vim	/^let g:which_key_map.g['s'] = 'Stage hunk' $/;"	v	language:Vim
g:which_key_map	settings/plugins/gitGutter.vim	/^let g:which_key_map.g['u'] = 'Undo hunk' $/;"	v	language:Vim
g:which_key_map	settings/plugins/minimap.vim	/^let g:which_key_map.t['M'] = { 'name' : '+minimap...' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/minimap.vim	/^let g:which_key_map.t['M']['c'] = 'Close minimap' $/;"	v	language:Vim
g:which_key_map	settings/plugins/minimap.vim	/^let g:which_key_map.t['M']['o'] = 'Open minimap' $/;"	v	language:Vim
g:which_key_map	settings/plugins/minimap.vim	/^let g:which_key_map.t['M']['u'] = 'Update minimap' $/;"	v	language:Vim
g:which_key_map	settings/plugins/minimap.vim	/^let g:which_key_map.t['m'] = 'Minimap' $/;"	v	language:Vim
g:which_key_map	settings/plugins/tabularize.vim	/^let g:which_key_map.c['t'] = 'Tabularize by...' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map =  {}$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b = { 'name' : '+buffer' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['K'] = 'Kill all buffers' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['N'] = 'New empty tab' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['['] = 'Previous buffer'$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b[']'] = 'Next buffer'$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['d'] = 'Kill buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['k'] = 'Kill buffer'$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['l'] = 'Switch buffers' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['n'] = 'Next buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.b['p'] = 'Previous buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.c = { 'name' : '+code' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f = { 'name' : '+file' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f.e = { 'name' : '+find-config' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f.e.d = { 'name' : '+dotfiles' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f.e.q = { 'name' : '+qtile' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f.e.v = { 'name' : '+vim' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f['S'] = 'Save all files' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f['c'] = 'CD to current directory' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f['s'] = 'Save file' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.f['v'] = 'Grep' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.h = { 'name' : '+help' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.h.r      = { 'name' : '+reload' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.h.r['e'] = 'Reload env' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.h.r['p'] = 'Reload plugins' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.h.r['r'] = 'Reload' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.i = { 'name' : '+insert' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.i['t'] = 'Insert Toilet title' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.p = { 'name' : '+popup' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.s = { 'name' : '+search' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.t = { 'name' : '+toggle' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.t['p'] = 'Paste mode' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.t['s'] = 'Spell check' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w = { 'name' : '+window' }$/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['+'] = 'Increase window height' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['-'] = 'Decrease window height' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['<'] = 'Decrease window width' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['='] = 'Balance windows' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['>'] = 'Increase window width' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['H'] = 'Move window left' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['J'] = 'Move window down' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['K'] = 'Move window up' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['L'] = 'Move window right' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['R'] = 'Rotate windows upwards' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['S'] = 'Split and follow window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['T'] = 'Tear off window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['V'] = 'VSplit and follow window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['W'] = 'Previous window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['_'] = 'Set window height' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['b'] = 'Bottom-right window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['c'] = 'Close window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['d'] = 'Close window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['h'] = 'Left window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['j'] = 'Down window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['k'] = 'Up window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['l'] = 'Right window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['n'] = 'New window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['o'] = 'Enlargen window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['p'] = 'Last window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['q'] = 'Quit vim' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['r'] = 'Rotate windows downwards' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['s'] = 'Split window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['t'] = 'Top-left window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['v'] = 'VSplit window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['w'] = 'Next window' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map.w['|'] = 'Set window width' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map[' '] = 'Hide search highlights' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map['<'] = 'Switch buffer' $/;"	v	language:Vim
g:which_key_map	settings/plugins/which-key.vim	/^let g:which_key_map['`'] = 'Terminal' $/;"	v	language:Vim
g:which_key_max_size	settings/plugins/which-key.vim	/^let g:which_key_max_size = 0$/;"	v	language:Vim
g:which_key_position	settings/plugins/which-key.vim	/^let g:which_key_position = 'botright'$/;"	v	language:Vim
g:which_key_use_floating_win	settings/plugins/which-key.vim	/^let g:which_key_use_floating_win = 0$/;"	v	language:Vim
g:which_key_vertical	settings/plugins/which-key.vim	/^let g:which_key_vertical = 0$/;"	v	language:Vim
g:yankstack_yank_keys	settings/plugins/yankstack.vim	/^let g:yankstack_yank_keys = ['y', 'd']$/;"	v	language:Vim
g=	settings/key-mappings.vim	/^noremap g= <C-a>$/;"	m	language:Vim
gR	settings/plugins/coc.vim	/^nmap <silent> gR <Plug>(coc-references)$/;"	m	language:Vim
gS	settings/plugins/sneak.vim	/^map gS <Plug>Sneak_,$/;"	m	language:Vim
gd	settings/plugins/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m	language:Vim
gi	settings/plugins/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m	language:Vim
gs	settings/plugins/sneak.vim	/^map gs <Plug>Sneak_;$/;"	m	language:Vim
gv	settings/plugins/ack.vim	/^vnoremap <silent> gv :call VisualSelection('gv', '')<CR>$/;"	m	language:Vim
gy	settings/plugins/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m	language:Vim
html.autoClosingTags	coc-settings.json	/^  "html.autoClosingTags": true,$/;"	b	language:JSON
html.format.enable	coc-settings.json	/^  "html.format.enable": true,$/;"	b	language:JSON
html.suggest.html5	coc-settings.json	/^  "html.suggest.html5": true,$/;"	b	language:JSON
html.validate.html	coc-settings.json	/^  "html.validate.html": true,$/;"	b	language:JSON
html.validate.scripts	coc-settings.json	/^  "html.validate.scripts": true,$/;"	b	language:JSON
html.validate.styles	coc-settings.json	/^  "html.validate.styles": true,$/;"	b	language:JSON
if	settings/plugins/coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m	language:Vim
if	settings/plugins/coc.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m	language:Vim
javascript.format.enabled	coc-settings.json	/^  "javascript.format.enabled": true,$/;"	b	language:JSON
javascript.implementationsCodeLens.enable	coc-settings.json	/^  "javascript.implementationsCodeLens.enable": true,$/;"	b	language:JSON
javascript.referencesCodeLens.enable	coc-settings.json	/^  "javascript.referencesCodeLens.enable": true,$/;"	b	language:JSON
javascript.suggest.autoImports	coc-settings.json	/^  "javascript.suggest.autoImports": true,$/;"	b	language:JSON
javascript.suggest.completeFunctionCalls	coc-settings.json	/^  "javascript.suggest.completeFunctionCalls": true,$/;"	b	language:JSON
javascript.suggest.enabled	coc-settings.json	/^  "javascript.suggest.enabled": true,$/;"	b	language:JSON
javascript.suggest.includeAutomaticOptionalChainCompletions	coc-settings.json	/^  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,$/;"	b	language:JSON
javascript.suggest.names	coc-settings.json	/^  "javascript.suggest.names": true,$/;"	b	language:JSON
javascript.suggest.paths	coc-settings.json	/^  "javascript.suggest.paths": true,$/;"	b	language:JSON
javascript.updateImportsOnFileMove.enable	coc-settings.json	/^  "javascript.updateImportsOnFileMove.enable": true,$/;"	b	language:JSON
javascript.validate.enable	coc-settings.json	/^  "javascript.validate.enable": true,$/;"	b	language:JSON
json.format.enable	coc-settings.json	/^  "json.format.enable": true,$/;"	b	language:JSON
lua.checkForUpdates	coc-settings.json	/^  "lua.checkForUpdates": "inform",$/;"	s	language:JSON
markdownlint.onChange	coc-settings.json	/^  "markdownlint.onChange": true$/;"	b	language:JSON
markdownlint.onSave	coc-settings.json	/^  "markdownlint.onSave": true,$/;"	b	language:JSON
mygroup	settings/plugins/coc.vim	/^augroup mygroup$/;"	a	language:Vim
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m	language:Vim
patternMatches	coc-settings.json	/^    "patternMatches": ["^\\\\."]$/;"	a	language:JSON	object:explorer.file.hiddenRules
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f	language:Vim
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f	language:Vim
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f	language:Vim
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f	language:Vim
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f	language:Vim
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f	language:Vim
prettier.semi	coc-settings.json	/^  "prettier.semi": true,$/;"	b	language:JSON
prettier.singleQuote	coc-settings.json	/^  "prettier.singleQuote": true,$/;"	b	language:JSON
prettier.tabWidth	coc-settings.json	/^  "prettier.tabWidth": 2,$/;"	n	language:JSON
prettier.trailingComma	coc-settings.json	/^  "prettier.trailingComma": "es5",$/;"	s	language:JSON
python.linting.enabled	coc-settings.json	/^  "python.linting.enabled": true,$/;"	b	language:JSON
python_highlight_all	after/ftplugin/python.vim	/^let python_highlight_all = 1$/;"	v	language:Vim
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :call <SID>close_pane()<cr>$/;"	m	language:Vim
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m	language:Vim
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v	language:Vim
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f	language:Vim
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f	language:Vim
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f	language:Vim
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f	language:Vim
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f	language:Vim
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f	language:Vim
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f	language:Vim
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v	language:Vim
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f	language:Vim
s:check_back_space	settings/plugins/coc.vim	/^function! s:check_back_space() abort$/;"	f	language:Vim
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f	language:Vim
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f	language:Vim
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f	language:Vim
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f	language:Vim
s:close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f	language:Vim
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f	language:Vim
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v	language:Vim
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f	language:Vim
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f	language:Vim
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f	language:Vim
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f	language:Vim
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f	language:Vim
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f	language:Vim
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f	language:Vim
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f	language:Vim
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f	language:Vim
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f	language:Vim
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f	language:Vim
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f	language:Vim
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f	language:Vim
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f	language:Vim
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f	language:Vim
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f	language:Vim
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f	language:Vim
s:git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f	language:Vim
s:git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f	language:Vim
s:git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f	language:Vim
s:git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f	language:Vim
s:git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f	language:Vim
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f	language:Vim
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f	language:Vim
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f	language:Vim
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f	language:Vim
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f	language:Vim
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f	language:Vim
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f	language:Vim
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f	language:Vim
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f	language:Vim
s:is_powershell	autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f	language:Vim
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f	language:Vim
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f	language:Vim
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v	language:Vim
s:isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f	language:Vim
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f	language:Vim
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f	language:Vim
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f	language:Vim
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f	language:Vim
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f	language:Vim
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f	language:Vim
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f	language:Vim
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f	language:Vim
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f	language:Vim
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v	language:Vim
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f	language:Vim
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f	language:Vim
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f	language:Vim
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f	language:Vim
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f	language:Vim
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f	language:Vim
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f	language:Vim
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f	language:Vim
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f	language:Vim
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v	language:Vim
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v	language:Vim
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f	language:Vim
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f	language:Vim
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v	language:Vim
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f	language:Vim
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f	language:Vim
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f	language:Vim
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v	language:Vim
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f	language:Vim
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f	language:Vim
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f	language:Vim
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f	language:Vim
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v	language:Vim
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v	language:Vim
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f	language:Vim
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f	language:Vim
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f	language:Vim
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f	language:Vim
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f	language:Vim
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f	language:Vim
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f	language:Vim
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f	language:Vim
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f	language:Vim
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f	language:Vim
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f	language:Vim
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f	language:Vim
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f	language:Vim
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f	language:Vim
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f	language:Vim
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f	language:Vim
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f	language:Vim
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f	language:Vim
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f	language:Vim
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f	language:Vim
s:show_documentation	settings/plugins/coc.vim	/^function! s:show_documentation()$/;"	f	language:Vim
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f	language:Vim
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f	language:Vim
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f	language:Vim
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f	language:Vim
s:status	autoload/plug.vim	/^function! s:status()$/;"	f	language:Vim
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f	language:Vim
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f	language:Vim
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f	language:Vim
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f	language:Vim
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f	language:Vim
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f	language:Vim
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f	language:Vim
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f	language:Vim
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f	language:Vim
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f	language:Vim
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v	language:Vim
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f	language:Vim
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f	language:Vim
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f	language:Vim
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f	language:Vim
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f	language:Vim
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f	language:Vim
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f	language:Vim
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f	language:Vim
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f	language:Vim
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f	language:Vim
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v	language:Vim
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f	language:Vim
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f	language:Vim
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f	language:Vim
suggest.autoTrigger	coc-settings.json	/^  "suggest.autoTrigger": "always",$/;"	s	language:JSON
suggest.noselect	coc-settings.json	/^  "suggest.noselect": false,$/;"	b	language:JSON
suggest.triggerAfterInsertEnter	coc-settings.json	/^  "suggest.triggerAfterInsertEnter": true,$/;"	b	language:JSON
tsserver.enableJavascript	coc-settings.json	/^  "tsserver.enableJavascript": true,$/;"	b	language:JSON
v	coc-settings.json	/^    "v": "open:vsplit"$/;"	s	language:JSON	object:explorer.keyMappings.global
vim_markdown_folding_disabled	after/ftplugin/markdown.vim	/^let vim_markdown_folding_disabled = 1$/;"	v	language:Vim
xml.symbols.enabled	coc-settings.json	/^  "xml.symbols.enabled": true,$/;"	b	language:JSON
xml.validation.enabled	coc-settings.json	/^  "xml.validation.enabled": true,$/;"	b	language:JSON
yaml.completion	coc-settings.json	/^  "yaml.completion": true,$/;"	b	language:JSON
yaml.validate	coc-settings.json	/^  "yaml.validate": true,$/;"	b	language:JSON
